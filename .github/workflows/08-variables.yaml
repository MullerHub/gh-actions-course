# .github/workflows/08-variables.yaml

name: 08 - Using Variables

on:
  push:
  workflow_dispatch:
# env (Nível WORKFLOW): Disponível para TODOS os jobs e steps.
# Pense nela como a configuração base para todo o workflow.
env:
  WORKFLOW_VAR: 'I am a workflow env var'
  OVERWRITTEN: 'I will be overwritten'

jobs:
  echo:
    runs-on: ubuntu-latest
    # env (Nível JOB): Disponível para todos os steps DENTRO DESTE JOB.
    # Esta definição de OVERWRITTEN tem prioridade sobre a do nível do workflow.
    env:
      JOB_VAR: 'I am a job env var'
      OVERWRITTEN: 'I have been overwritten at the job level'

    steps:
      # Primeiro Step
      - name: Print Env Variables
        # env (Nível STEP): Disponível APENAS para este step.
        # Estas variáveis são as mais específicas, mas não estamos sobrescrevendo nada aqui ainda.
        env:
          STEP_VAR: 'I am a step env var'
          step_var2: 'I am another step var'
        run: |
          echo "Step env var: $STEP_VAR"
          echo "Step env var 2: $step_var2"
          echo "Job env var: $JOB_VAR"
          echo "Workflow env var: $WORKFLOW_VAR"
          # O valor de OVERWRITTEN vem do nível do JOB, pois é o mais próximo na hierarquia.
          echo "Overwritten: $OVERWRITTEN"

      # Segundo Step
      - name: Overwrite Job Variable
        # env (Nível STEP): Agora sim, estamos definindo uma variável no nível do step
        # que tem o mesmo nome de uma do nível do job/workflow.
        # Esta definição tem a MAIOR prioridade, mas só vale dentro deste step.
        env:
          OVERWRITTEN: 'I have been overwritten at the step level'
        run: |
          # O valor impresso aqui será o definido acima, no 'env' deste step.
          echo "Overwritten inside the step: $OVERWRITTEN"
          # As outras variáveis, como STEP_VAR do passo anterior, não existem aqui.
          echo "Trying to access STEP_VAR from previous step: ---$STEP_VAR--- (it will be empty)"